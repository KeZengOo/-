<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nuoxin.virtual.rep.api.mybatis.DoctorMapper">


    <select id="getCustomerSumStatistic"
            resultType="com.nuoxin.virtual.rep.api.web.controller.response.work.CustomerSumResponseBean"
            parameterType="com.nuoxin.virtual.rep.api.web.controller.request.WorkStationRequestBean">
        select count(vd.client_level) as typeSum ,vd.client_level as type from virtual_doctor vd
        inner join virtual_drug_user_doctor vdud
        on vd.id = vdud.virtual_doctor_id
        where vdud.product_id=#{productId}
        and vd.drug_user_ids like #{drugUserIdStr}
        group by vd.client_level

    </select>


    <select id="getCustomerAddStatistic"
            resultType="com.nuoxin.virtual.rep.api.web.controller.response.work.CustomerSumResponseBean"
            parameterType="com.nuoxin.virtual.rep.api.web.controller.request.WorkStationRequestBean">

    </select>


    <select id="getCustomerCoveredStatistic"
            resultType="com.nuoxin.virtual.rep.api.web.controller.response.work.CustomerSumResponseBean"
            parameterType="com.nuoxin.virtual.rep.api.web.controller.request.WorkStationRequestBean">

    </select>


    <update id="updateFixedField">

        update doctor set name=#{name}, mobile=#{telephone}, depart = #{depart}, hospital_name = #{hospital}

        where id = #{doctorId}


        update doctor
        <set>

            <if test="name !=null and name !=''">
                name = #{name},
            </if>

            <if test="mobile !=null and mobile !=''">
                name = #{mobile},
            </if>

            <if test="depart !=null and depart !=''">
                name = #{depart},
            </if>

            <if test="hospital_name !=null and hospital_name !=''">
                name = #{hospital}
            </if>


        </set>

        where id = #{doctor}



    </update>


    <update id="updateFixedName" parameterType="com.nuoxin.virtual.rep.api.web.controller.response.hcp.HcpDynamicRequestBean">
        update doctor set name = #{name} where id=#{doctorId}
    </update>

    <update id="updateFixedTelephone" parameterType="com.nuoxin.virtual.rep.api.web.controller.response.hcp.HcpDynamicRequestBean">
        update doctor set telephone = #{telephone} where id=#{doctorId}
    </update>

    <update id="updateFixedDepart" parameterType="com.nuoxin.virtual.rep.api.web.controller.response.hcp.HcpDynamicRequestBean">
        update doctor set depart = #{depart} where id=#{doctorId}
    </update>

    <update id="updateFixedHospital" parameterType="com.nuoxin.virtual.rep.api.web.controller.response.hcp.HcpDynamicRequestBean">
        update doctor set hospital_name = #{hospital} where id=#{doctorId}
    </update>

	<!-- 以下是虚拟工作台 v2.5 后用到的 -->
	
	<!-- 根据过滤条件获取医生总条数 -->
	<select id="getListCount" resultType="java.lang.Integer">
		SELECT 
			count(d.id)
		FROM doctor d 
		JOIN (
			<!-- 根据 virtualDrugUserIds 获取对应去重后的 doctorIds -->
	  		SELECT 
				DISTINCT doctor_id 
			FROM drug_user_doctor 
			WHERE is_available=1 AND drug_user_id IN
			<foreach collection="virtualDrugUserIds" item="virtualDrugUserId" open="(" close=")" separator=",">
	   			#{virtualDrugUserId}
	  		</foreach> 
	  		
	  		<!-- 根据产品线 ID 筛选 -->
	  		<if test="productLineIds != null">
	            AND prod_id IN 
				<foreach collection="productLineIds" item="productLineId" open="(" close=")" separator=",">
                  #{productLineId}
  				</foreach> 
			</if>
  		) temp ON  d.id=temp.doctor_id
  		
  		<!-- 搜索:d.name 模糊匹配,d.telephone 及 d.depart 精确匹配 -->
  		<if test="search != null">
  			WHERE 
			d.name LIKE "%"#{search,jdbcType=VARCHAR}"%" 
			OR d.telephone=#{search,jdbcType=VARCHAR} 
			OR d.depart=#{search,jdbcType=VARCHAR}
  		</if>
  		
	</select>
	
	<!-- 根据过滤条件获取医生拜访列表信息(不含对应的产品信息) -->
	<select id="getList" resultType="com.nuoxin.virtual.rep.api.web.controller.response.v2_5.CustomerFollowListBean">
		<!-- 根据 virtualDrugUserIds 获取对应医生基本信息 -->
		SELECT 
			d.id AS doctorId, d.name AS doctorName, d.telephone AS doctorMobile, 
			d. sex AS gender, d.depart AS department, d.hospital_name AS hospitalName,
			tel_visit.create_time AS visitTime,tel_visit.next_visit_time AS nextVisitTime,tel_visit.visit_result AS visitResult,
			dm.wechat, dm.secondary_mobile AS secondaryDoctorMobile, dm.thirdary_mobile AS thirdaryDoctorMobile
		FROM doctor d 
		LEFT JOIN doctor_mend dm
		ON d.id=dm.virtual_doctor_id
		JOIN (
			<!-- 根据 virtualDrugUserIds 获取对应的 doctorIds -->
			SELECT 
				DISTINCT doctor_id 
			FROM drug_user_doctor 
			WHERE is_available=1 AND drug_user_id IN
				<foreach collection="virtualDrugUserIds" item="virtualDrugUserId" open="(" close=")" separator=",">
		   			#{virtualDrugUserId}
		  		</foreach> 
		  	
		  	<!-- 根据产品线 ID 筛选 -->
		  	<if test="productLineIds != null">
	            AND prod_id IN 
				<foreach collection="productLineIds" item="productLineId" open="(" close=")" separator=",">
                  #{productLineId}
  				</foreach> 
			</if>
	  	) temp  ON  d.id=temp.doctor_id
	  	
	  	<!-- 搜索 -->
	  	<if test="search != null">
  			AND (
  				d.name LIKE "%"#{search,jdbcType=VARCHAR}"%" 
				OR d.telephone=#{search,jdbcType=VARCHAR} 
				OR d.depart=#{search,jdbcType=VARCHAR}
			)
  		</if>
		
		<!-- 左连接 virtual_doctor_call_info 表获取电话拜访信息 -->
		LEFT JOIN (
			SELECT c.virtual_doctor_id, c.create_time,
			m.visit_result, m.next_visit_time FROM virtual_doctor_call_info c 
			JOIN virtual_doctor_call_info_mend m		
				ON m.call_id=c.id	
			WHERE c.id IN (
				SELECT MAX(id) FROM virtual_doctor_call_info  WHERE virtual_drug_user_id IN 
 				<foreach collection="virtualDrugUserIds" item="virtualDrugUserId" open="(" close=")" separator=",">
		   			#{virtualDrugUserId}
		  		</foreach> 
		  		GROUP BY virtual_doctor_id
			) 
			
		) tel_visit ON tel_visit.virtual_doctor_id=d.id
		
		GROUP BY d.id
		ORDER BY visitTime DESC <!-- OTHER ORDER BY TODO  -->
		LIMIT #{currentSize},#{pageSize}
	</select>
</mapper>