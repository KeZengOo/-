<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nuoxin.virtual.rep.api.mybatis.DrugUserMapper">

    <resultMap id="doctorResponseBean"
               type="com.nuoxin.virtual.rep.api.web.controller.response.doctor.DoctorResponseBean">
        <result column="name" property="doctorName" jdbcType="VARCHAR"/>
        <!--<result column="email" property="" jdbcType=""/>-->
        <!--<result column="hospital_id" property="" jdbcType=""/>-->
        <result column="hospital_name" property="hospitalName" jdbcType="VARCHAR"/>
        <result column="provice" property="province" jdbcType="VARCHAR"/>
        <result column="city" property="city" jdbcType="VARCHAR"/>
        <result column="depart" property="department" jdbcType="VARCHAR"/>
        <result column="telephone" property="doctorMobile" jdbcType="VARCHAR"/>
        <!--<result column="positions" property="" jdbcType=""/>-->
        <!--<result column="create_time" property="" jdbcType=""/>-->
        <result column="product_name" property="productName" jdbcType="VARCHAR"/>
        <result column="doctor_id" property="doctorId" jdbcType="BIGINT"/>
        <result column="hospital_level" property="hospitalLevel" jdbcType="VARCHAR"/>
        <result column="client_level" property="clientLevel" jdbcType="VARCHAR"/>
        <result column="product_id" property="productId" jdbcType="BIGINT"/>
        <result column="drug_user_name" property="drugUserName" jdbcType="VARCHAR"/>
        <result column="drug_user_id" property="drugUserId" jdbcType="BIGINT"/>
    </resultMap>

    <select id="doctorPage" resultMap="doctorResponseBean"
            parameterType="com.nuoxin.virtual.rep.api.web.controller.request.QueryRequestBean">
        select
        d.id,d.name,d.email,d.hospital_id,d.hospital_name,d.provice,d.city,d.depart,d.telephone,d.positions,d.create_time,d.status,dv.doctor_id,dv.hospital_level,dv.client_level,dv.master_data_id,du.name
        drug_user_name,dud.prod_id product_id,dud.drug_user_id,pl.prod_name product_name from drug_user_doctor dud join doctor d on d.id=dud.doctor_id join
        drug_user du on du.id=dud.drug_user_id join doctor_virtual dv on dv.doctor_id=dud.doctor_id join product_line pl on pl.prod_id=dud.prod_id where dud.is_available=1 and du.leader_path
        like #{leaderPath,jdbcType=VARCHAR}
        <if test="name!=null and name!=''">

            and d.name like #{name,jdbcType=VARCHAR}
        </if>
        <if test="drugUserName!=null and drugUserName!=''">

            and du.name like #{drugUserName,jdbcType=VARCHAR}
        </if>
        <if test="mobile!=null and mobile!=''">

            and d.telephone like #{mobile,jdbcType=VARCHAR}
        </if>
        <if test="department!=null and department!=''">

            and d.depart like #{department,jdbcType=VARCHAR}
        </if>
        <if test="doctorLevel!=null and doctorLevel!=''">

            and d.positions like #{doctorLevel,jdbcType=VARCHAR}
        </if>
        <if test="hospital!=null and hospital!=''">

            and d.hospital_name like #{hospital,jdbcType=VARCHAR}
        </if>
        <if test="productId!=null and productId!=0">

            and dud.prod_id like #{productId,jdbcType=BIGINT}
        </if>
        LIMIT ${currentSize},${pageSize}
    </select>

    <!-- 得到指定产品下的线上代表 sale_type:销售类型，0是没有类型为经理的，1是线上销售，2是线下销售-->
    <select id="getOnlineDrugUserList" resultType="com.nuoxin.virtual.rep.api.web.controller.response.DrugUserResponseBean">
        SELECT
            DISTINCT du.id, du.name
        FROM
            product_user pu
        INNER JOIN drug_user du ON pu.user_id = du.id
        WHERE
            pu.prod_id = #{productId}
        AND du.sale_type = 1
    </select>

    <!-- 得到产品下所有的代表，不包括经理,管理员 -->
    <select id="getAllDrugUserList" resultType="com.nuoxin.virtual.rep.api.web.controller.response.DrugUserResponseBean">
        SELECT
            DISTINCT du.id, du.name
        FROM
            product_user pu
        INNER JOIN drug_user du ON pu.user_id = du.id
        INNER JOIN role_user ru ON du.id=ru.user_id AND ru.role_id > 100
        WHERE
            pu.prod_id = #{productId}
            AND du.status=1
            AND ru.role_id NOT IN (102, 103)
    </select>


    <select id="doctorPageCount" resultType="java.lang.Integer"
            parameterType="com.nuoxin.virtual.rep.api.web.controller.request.QueryRequestBean">
        select count(1) num from drug_user_doctor dud join doctor d on d.id=dud.doctor_id join
        drug_user du on du.id=dud.drug_user_id join doctor_virtual dv on dv.doctor_id=dud.doctor_id where dud.is_available=1 and du.leader_path
        like #{leaderPath,jdbcType=VARCHAR}
        <if test="name!=null and name!=''">

            and d.name like #{name,jdbcType=VARCHAR}
        </if>
        <if test="drugUserName!=null and drugUserName!=''">

            and du.name like #{drugUserName,jdbcType=VARCHAR}
        </if>
        <if test="mobile!=null and mobile!=''">

            and d.telephone like #{mobile,jdbcType=VARCHAR}
        </if>
        <if test="department!=null and department!=''">

            and d.depart like #{department,jdbcType=VARCHAR}
        </if>
        <if test="doctorLevel!=null and doctorLevel!=''">

            and d.positions like #{doctorLevel,jdbcType=VARCHAR}
        </if>
        <if test="hospital!=null and hospital!=''">

            and d.hospital_name like #{hospital,jdbcType=VARCHAR}
        </if>
        <if test="productId!=null and productId!=0">

            and dud.prod_id like #{productId,jdbcType=BIGINT}
        </if>
    </select>

    <resultMap id="drugUserResponseBean" type="com.nuoxin.virtual.rep.api.web.controller.response.DrugUserResponseBean">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="relationDrugUser" resultMap="drugUserResponseBean">
      select
       DISTINCT du.id,du.name
      from product_user pu
      INNER JOIN product_line pl
      ON pu.prod_id=pl.prod_id
      join drug_user du
      on pu.user_id=du.id
      INNER JOIN role_user ru
        ON du.id=ru.user_id AND ru.role_id > 100
      where 1=1
       <if test="productId !=null and productId !=0">
           AND pu.prod_id = #{productId}
       </if>

      <!--
      <if test="leaderPath !=null and leaderPath!=''">
         AND du.leader_path like #{leaderPath,jdbcType=VARCHAR}
      </if>
      -->

      AND du.status=1
      AND pl.show_place=1
      AND ru.role_id NOT IN (102, 103)


      group by du.id

    </select>


    <!-- virtual_doctor_call_info_mend 表无法通过关系查询出来的代表ID -->
    <select id="mendOtherDrugUserId" resultType="java.lang.Long">

        SELECT DISTINCT du.id FROM virtual_doctor_call_info_mend m
        INNER JOIN drug_user du
        ON m.virtual_drug_user_id=du.id
        WHERE 1=1
        <if test="productId !=null and productId !=0">
            AND m.product_id = #{productId}
        </if>

        AND m.virtual_drug_user_id NOT IN (

            select
            DISTINCT du.id
            from product_user pu
            INNER JOIN product_line pl
            ON pu.prod_id=pl.prod_id
            join drug_user du
            on pu.user_id=du.id
            INNER JOIN role_user ru
            ON du.id=ru.user_id AND ru.role_id > 100
            where 1=1
            <if test="productId !=null and productId !=0">
                AND pu.prod_id = #{productId}
            </if>
            AND du.status=1
            AND pl.show_place=1
            AND ru.role_id NOT IN (102, 103)

        )


    </select>



    
    <!-- 以下是 v2.5 使用到的 -->
    
    <select id="getSubordinatesByLeaderPath" resultMap="drugUserResponseBean">
    	SELECT id,name FROM drug_user WHERE leader_path LIKE #{leaderPath}
    </select>
    
    <select id="getSubordinateIdsByLeaderPath" resultType="java.lang.Long">
    	SELECT id FROM drug_user WHERE leader_path LIKE #{leaderPath}
    </select>


    <!-- 查询名下所有的产品 -->
    <select id="getProductList" resultType="com.nuoxin.virtual.rep.api.entity.v2_5.ProductDO">

        SELECT
        DISTINCT pl.prod_id productId, pl.prod_name productName
        FROM product_line pl
        INNER JOIN product_user pu
        ON pl.prod_id=pl.prod_id
        INNER JOIN drug_user du
        ON pu.user_id=du.id
        WHERE du.leader_path
        LIKE #{leaderPath}

    </select>



    <!-- 查询名下所有的产品 -->
    <select id="getSetDynamicFieldProductList" resultType="com.nuoxin.virtual.rep.api.entity.v2_5.ProductDO">

        SELECT
        DISTINCT pl.prod_id productId, pl.prod_name productName
        FROM product_line pl
        INNER JOIN product_user pu
        ON pl.prod_id=pu.prod_id
        INNER JOIN drug_user du
        ON pu.user_id=du.id
        INNER JOIN virtual_doctor_dynamic_field vddf
        ON pl.prod_id=vddf.product_id
        WHERE du.leader_path
        LIKE #{leaderPath}

    </select>

    <!-- 查询销售名下某个医生所有设置动态字段的产品 -->
    <select id="getSetDynamicFieldProductListByDoctorId" resultType="com.nuoxin.virtual.rep.api.entity.v2_5.ProductDO">

        SELECT
        DISTINCT pl.prod_id productId, pl.prod_name productName
        FROM product_line pl
        INNER JOIN drug_user_doctor dud
        ON pl.prod_id=dud.prod_id
        INNER JOIN drug_user du
        ON dud.drug_user_id=du.id
        INNER JOIN doctor d
        ON dud.doctor_id=d.id
        INNER JOIN virtual_doctor_dynamic_field vddf
        ON pl.prod_id=vddf.product_id
        WHERE
        dud.is_available=1
        AND
        d.id=#{doctorId} And du.leader_path
        LIKE #{leaderPath}

    </select>


    <!-- 查询销售名下某个医生所有设置动态字段的产品 -->
    <select id="getSetDynamicFieldProductListByProduct" resultType="com.nuoxin.virtual.rep.api.entity.v2_5.ProductDO">

        SELECT
        DISTINCT pl.prod_id productId, pl.prod_name productName
        FROM product_line pl
        INNER JOIN drug_user_doctor dud
        ON pl.prod_id=dud.prod_id
        INNER JOIN doctor d
        ON dud.doctor_id=d.id
        INNER JOIN virtual_doctor_dynamic_field vddf
        ON pl.prod_id=vddf.product_id
        WHERE
        d.id=#{doctorId}
        <if test="productIdList !=null and productIdList.size > 0">
            AND dud.prod_id IN
            <foreach collection="productIdList" item="productId" open="(" close=")" separator=",">
                #{productId}
            </foreach>
        </if>

    </select>



    <!-- 查询销售名下某个医生所有设置动态字段的产品 -->
    <select id="getProductListByDoctorId" resultType="com.nuoxin.virtual.rep.api.web.controller.response.v3_0.DoctorProductResponse">

        SELECT
        DISTINCT pl.prod_id productId, pl.prod_name productName, d.id doctorId
        FROM product_line pl
        INNER JOIN drug_user_doctor dud
        ON pl.prod_id=dud.prod_id
        INNER JOIN drug_user du
        ON dud.drug_user_id=du.id
        INNER JOIN doctor d
        ON dud.doctor_id=d.id
        INNER JOIN virtual_doctor_dynamic_field vddf
        ON pl.prod_id=vddf.product_id
        WHERE
        dud.is_available=1
        AND
        d.id IN
        <foreach collection="doctorIdList" item="doctorId" open="(" close=")" separator=",">
            #{doctorId}
        </foreach>

        And du.leader_path
        LIKE #{leaderPath}

    </select>



    <!-- 查询销售名下某个医生所有设置动态字段的产品 -->
    <select id="getProductListByDoctorIdAndProduct" resultType="com.nuoxin.virtual.rep.api.web.controller.response.v3_0.DoctorProductResponse">

        SELECT
        DISTINCT pl.prod_id productId, pl.prod_name productName, d.id doctorId
        FROM product_line pl
        INNER JOIN drug_user_doctor dud
        ON pl.prod_id=dud.prod_id
        INNER JOIN drug_user du
        ON dud.drug_user_id=du.id
        INNER JOIN doctor d
        ON dud.doctor_id=d.id
        INNER JOIN virtual_doctor_dynamic_field vddf
        ON pl.prod_id=vddf.product_id
        WHERE 1=1



        <if test="type !=null and type==1">
            AND dud.is_available=1
        </if>

        AND
        d.id IN
        <foreach collection="doctorIdList" item="doctorId" open="(" close=")" separator=",">
            #{doctorId}
        </foreach>

        <if test="productIdList !=null and productIdList.size > 0">
            AND dud.prod_id IN
            <foreach collection="productIdList" item="productId" open="(" close=")" separator=",">
                #{productId}
            </foreach>
        </if>

    </select>



    <!-- 根据ID获得已经拼上%的leaderPath -->
    <select id="getLeaderPathById" resultType="java.lang.String">
        SELECT concat(du.leader_path, '%')
        FROM drug_user du
        WHERE du.id=#{id}
    </select>

    <!-- 根据邮箱查询代表的产品ID列表 -->
    <select id="getProductIdListByEmail" resultType="java.lang.Long">
        SELECT DISTINCT pl.prod_id FROM product_line pl
        INNER JOIN product_user pu
        ON pl.prod_id=pu.prod_id
        INNER JOIN drug_user du
        ON pu.user_id=du.id
        WHERE du.email=#{email}
    </select>


    <select id="getRoleIdByDrugUserId" resultType="java.lang.Long">
        SELECT DISTINCT role_id FROM role_user WHERE user_id=#{drugUserId} AND role_id > 100
    </select>

    <!-- 得到多个代表名字 -->
    <select id="getDrugUserNameList" resultType="java.lang.String">
        SELECT GROUP_CONCAT(DISTINCT du.name SEPARATOR '、') FROM drug_user du
        WHERE du.id IN
        <foreach collection="drugUserIdList" item="drugUserId" open="(" close=")" separator=",">
            #{drugUserId}
        </foreach>
    </select>

    <select id="getMangerCount" resultType="java.lang.Integer">
        SELECT
            COUNT(*)
        FROM
            drug_user du
        INNER JOIN role_user ru ON du.id = ru.user_id
        WHERE
            ru.role_id = 102
        AND du.id IN
        <foreach collection="drugUserIdList" item="drugUserId" open="(" close=")" separator=",">
            #{drugUserId}
        </foreach>
    </select>

    <!-- 根据代表邮箱查询代表角色种类，去重  -->
    <select id="getRoleIdList" resultType="java.lang.Long">
        SELECT DISTINCT
            ru.role_id
        FROM
            drug_user du
            INNER JOIN role_user ru ON du.id = ru.user_id
        WHERE
            ru.role_id > 100
            AND du.email IN
        <foreach collection="drugUserEmailList" item="drugUserEmail" open="(" close=")" separator=",">
            #{drugUserEmail}
        </foreach>
    </select>

    <select id="getRoleIdListByDoctor" resultType="com.nuoxin.virtual.rep.api.entity.DrugUser">
        SELECT DISTINCT
            du.email,
            ru.role_id roleId
        FROM
            drug_user du
            INNER JOIN drug_user_doctor dud ON du.id = dud.drug_user_id
            INNER JOIN role_user ru ON du.id = ru.user_id
        WHERE
            dud.is_available = 1
            AND dud.doctor_id=#{doctorId}
            AND du.id != #{drugUserId}
            AND dud.prod_id=#{productId}
            AND ru.role_id > 100
    </select>


    <!-- 查询代表角色种类，去重  -->
    <select id="getDrugUserList" resultType="com.nuoxin.virtual.rep.api.entity.DrugUser">
        SELECT DISTINCT
            du.id,
            du.name,
            du.email,
            ru.role_id roleId
        FROM
            drug_user_doctor dud
            INNER JOIN drug_user du ON dud.drug_user_id = du.id
            INNER JOIN role_user ru ON du.id = ru.user_id
        WHERE
            dud.is_available = 1
            AND dud.doctor_id IN ( SELECT id doctor_id FROM doctor WHERE telephone = #{telephone}
            UNION
            SELECT doctor_id FROM doctor_telephone WHERE telephone = #{telephone} )
            AND dud.prod_id = #{productId}
            AND ru.role_id IN
            <foreach collection="roleIdList" item="roleId" open="(" close=")" separator=",">
                #{roleId}
            </foreach>
    </select>


    <select id="getRoleNameById" resultType="java.lang.String">
        SELECT role_name FROM role WHERE id=#{roleId}
    </select>


    <!-- 根据代表ID查询角色名称 -->
    <select id="getRoleNameByUserId" resultType="java.lang.String">
        SELECT GROUP_CONCAT(DISTINCT r.role_name) FROM role r
        INNER JOIN role_user ru
        ON r.id=ru.role_id
        WHERE ru.user_id = #{drugUserId}
        AND r.id > 100
    </select>

    
</mapper>